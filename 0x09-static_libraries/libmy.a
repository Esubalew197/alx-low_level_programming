!<arch>
0-isupper.c/    0           0     0     644     199       `
#include "main.h"

/**
 ** _isupper - checks if uppercase
 ** @c: character to check
 ** Return: gives 1 or 0
 **/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	return (0);
}

0-strcat.c/     0           0     0     644     407       `
#include "main.h"
/**
 ** _strcat - concatenates two strings,
 ** @dest: destination.
 ** @src: source.
 ** Return: the pointer to dest.
 **/

char *_strcat(char *dest, char *src)
{
	int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}
	while (count2 >= 0)
	{
		*(dest + count) = *(src + count2);
		if (*(src + count2) == '\0')
			break;
		count++;
		count2++;
	}
	return (dest);
}

1-memcpy.c/     0           0     0     644     287       `
#include "main.h"
/**
 * _memcpy - irontnoux2
 * @dest: pointer to char params
 * @src: pointer to char params
 * @n: size
 * Return: *dest
 **/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     44        `
#include "main.h"
int _strlen(char *s)
{

}
2-strlen.c/     0           0     0     644     206       `
#include "main.h"

/**
 ** _strlen - returns length of string
 ** @s: string
 ** Return: length of string
 **/

int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
	{
		len++;
	}
	return (len);
}
3-puts.c/       0           0     0     644     203       `
#include "main.h"

/**
 ** _puts - prints string
 ** @str: string
 ** Return: void
 **/

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}

	_putchar('\n');
}

3-strspn.c/     0           0     0     644     459       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring.
 * @s: initial segment.
 * @accept: accepted bytes.
 * Return: the number of accepted bytes.
 **/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, bool;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		bool = 1;
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
			{
				bool = 0;
				break;
			}
		}
		if (bool == 1)
			break;
	}
	return(i);
}

4-strpbrk.c/    0           0     0     644     476       `
#include "main.h"
/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: first string.
 * @accept: second string.
 * Return: a pointer to the byte in s that matches one of the
 * bytes in accept, or NULL if no such byte is found.
 **/

char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     67        `
#include "main.h"
unsigned int _strspn(char *s, char *accept)
{

}

0-memset.c/     0           0     0     644     253       `
#include "main.h"
/**
 * _memset - ironnou
 * @s: pointer to char params
 * @b: data to change
 * @n: index
 * Return: *s
 **/

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

1-isdigit.c/    0           0     0     644     203       `
#include "main.h"

/**
 ** _isdigit - determine if digit
 ** @c: character to determine
 ** Return: gives boolean
 **/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	return (0);
}

1-strncat.c/    0           0     0     644     454       `
#include "main.h"
/**
 ** _strncat - concatenates two strings,
 ** @dest: destination.
 ** @src: source.
 ** @n: amount of bytes used from src.
 ** Return: the pointer to dest.
 **/
char *_strncat(char *dest, char *src, int n)
{
	int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}

	while (count2 < n)
	{
		*(dest + count) = *(src + count2);
		if (*(src + count2) == '\0')
			break;
		count++;
		count2++;
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     355       `
#include "main.h"
/**
 * _strchr - locates a character in a string,
 * @s: string.
 * @c: character.
 * Return: the pointer to the first occurrence of the character c.
 **/
char *_strchr(char *s, char c)
{
	unsigned int i = 0;

	for (; *(s + i) != '\0'; i++)
		if (*(s + i) == c)
			return (s + i);
	if (*(s + i) == c)
		return (s + i);
	return ('\0');
}

2-strncpy.c/    0           0     0     644     350       `
#include "main.h"
/**
 **  _strncpy - copies a string
 **  @dest: destination.
 **  @src: source.
 **  @n: amount of bytes from src.
 **  Return: the pointer to dest.
 **/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-strcmp.c/     0           0     0     644     367       `
#include "main.h"
/**
 ** _strcmp - compares two strings
 ** @s1: first string.
 ** @s2: second string.
 ** Return: 0 if s1 and s2 are equals,
 ** another number if not.
 **/
int _strcmp(char *s1, char *s2)
{
	int i = 0, op = 0;

	while (op == 0)
	{
		if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))
			break;
		op = *(s1 + i) - *(s2 + i);
		i++;
	}

	return (op);
}

4-isalpha.c/    0           0     0     644     329       `
#include "main.h"

/**
 ** _isalpha - Shows 1 if the input is a
 ** letter Another cases, shows 0
 **
 ** @c: The character in ASCII code
 **
 ** Return: 1 for letters. 0 for the rest.
 **/
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

5-strstr.c/     0           0     0     644     513       `
#include "main.h"
#include <stdio.h>
/**
 * _strstr - locates a substring
 * @haystack: string to search in
 * @needle: substring to look for
 *  
 * Return: pointer to the beginning of the located substring
 * or NULL if the substring is not found
 **/
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (!needle[j])
			return (&haystack[i]);
	}
	return (NULL);
}

9-strcpy.c/     0           0     0     644     318       `
#include "main.h"

/**
 ** _strcpy - copies the string pointed to by src into dest
 ** @dest: destination
 ** @src: source
 ** Return: char with copy of string
 **/

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		dest[i] = *(src + i);
	}
	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     253       `
#include <unistd.h>

/**
 ** _putchar - writes the character c to stdout
 ** @c: The character to print
 **
 ** Return: On success 1.
 ** On error, -1 is returned, and errno is set appropriately.
 **/
int _putchar(char c)
{
	return (write(1, &c, 1));
}

